//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/InputBindings.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputBindings: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputBindings()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputBindings"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""8032b4e0-ea07-448e-a46f-826428218e93"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7b0bda95-acbb-4d86-bfc4-068e87d5f99b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""EyeTracking"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4d0b5468-84ff-45ab-8a1b-f6b4bcbc76a9"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Eye Gaze Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""06a9a29a-909b-478e-9d80-9db6477b58a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HeadPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""75707510-0e30-4dde-99ea-d63b588b76e7"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HeadRotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7cf1e19c-6229-4845-91b2-224ef0394189"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Controller Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""710cac6c-f52f-4e35-9b78-a311e942af66"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Controller Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cc3f1646-d3bb-4f6e-ba45-e79e6432c891"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Freeze"",
                    ""type"": ""Button"",
                    ""id"": ""3065a89c-34ce-410f-8fc5-29fccb52420a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectBox"",
                    ""type"": ""Button"",
                    ""id"": ""40747b3e-4657-49ef-a27d-dc7bc5390b84"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1145d288-c1de-48ff-a9ba-6a41974a1b7e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e8e4604-9ad6-45e8-8bae-aac704d73f72"",
                    ""path"": ""<EyeGaze>/pose/rotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""EyeTracking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d52bcb8-884c-4ec6-a540-62eb821b34af"",
                    ""path"": ""<XRInputV1::EyeTrackingOpenXR>/pose/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7faa211c-44f0-454e-baa7-892372c3c995"",
                    ""path"": ""<OpenXRHmd>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""HeadPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e41562f-8087-41b7-a641-180aa5f992be"",
                    ""path"": ""<OpenXRHmd>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""HeadRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d959c47-6ddd-407f-aacb-0d16de4e8427"",
                    ""path"": ""<ViveController>{LeftHand}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""Left Controller Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83d3da9e-ffd3-428e-833e-d90482557b66"",
                    ""path"": ""<ViveController>{RightHand}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""Right Controller Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30784f23-c808-4cee-87dc-5d4d3e415a7f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Freeze"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""641cd10e-72fe-4bc9-8afb-8e25a41ef0e3"",
                    ""path"": ""<XRInputV1::HTC::HTCViveControllerOpenXR>{RightHand}/triggerpressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""Freeze"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""179bd927-2edd-4263-a64c-34d3c59e3797"",
                    ""path"": ""<XRInputV1::HTC::HTCViveControllerOpenXR>{LeftHand}/triggerpressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""Freeze"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49621591-10b5-4f52-ab4f-35f2484b276f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectBox"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""890913c0-8c32-4a93-b7d2-2a514676ff3f"",
                    ""path"": ""<XRInputV1::HTC::HTCViveControllerOpenXR>{RightHand}/triggerpressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""SelectBox"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14d09cc1-7aff-4392-b756-9a58931c7cdd"",
                    ""path"": ""<XRInputV1::HTC::HTCViveControllerOpenXR>{LeftHand}/triggerpressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""SelectBox"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""d0613ba3-3bef-4e31-a113-db450867f0f2"",
            ""actions"": [
                {
                    ""name"": ""Continue"",
                    ""type"": ""Button"",
                    ""id"": ""9f48518a-c72a-4dd0-b42a-0a6039298806"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Return"",
                    ""type"": ""Button"",
                    ""id"": ""6a0112b9-3336-421b-8bcf-3c130dd30550"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skip"",
                    ""type"": ""Button"",
                    ""id"": ""25a282cc-a9fc-4158-8351-1dfe84d4ccf1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""58caaec9-d7b5-4e62-b67a-1c89ccfd0981"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""startrecordingtest"",
                    ""type"": ""Button"",
                    ""id"": ""cd90c677-250d-488a-b874-25896e7dff15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""stoprecordingtest"",
                    ""type"": ""Button"",
                    ""id"": ""37d78d2a-1e32-4ead-bf3c-e868a8a90fcf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""showrecordingtest"",
                    ""type"": ""Button"",
                    ""id"": ""074bee3f-6141-4743-8603-5417aefa121a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Calibration"",
                    ""type"": ""Button"",
                    ""id"": ""368e06a7-1c4c-4c29-8447-fb977a663714"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Validation"",
                    ""type"": ""Button"",
                    ""id"": ""60dec410-b0a0-4143-ace8-df3fc2360a5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pressed"",
                    ""type"": ""Button"",
                    ""id"": ""af98807f-8423-43b0-91f2-c8e44ef1cf1a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""17302692-da41-4cae-bc97-f485c574f2d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Unpause"",
                    ""type"": ""Button"",
                    ""id"": ""1a5d5fd3-b3f4-42bc-8cb3-688cba31f1cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Controller Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""33cffcc6-5567-4784-8e64-85ba037b324a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Controller Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9b28a7ee-b312-4ff8-955d-537daf01d6f4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Receiver "",
                    ""type"": ""Button"",
                    ""id"": ""0751d9af-e83c-4b06-b6f8-d1d5b173b3bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Signaler "",
                    ""type"": ""Button"",
                    ""id"": ""c1229aff-5d05-42e9-a5c6-3985516b166a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""46fb3456-afd2-488e-ab59-d3933a80c822"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d12c2f81-d972-4f8a-bd4a-d9c3c072068a"",
                    ""path"": ""<ViveController>{RightHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90f7f2e1-93ff-4b6c-b3a0-8f60717a6291"",
                    ""path"": ""<XRInputV1::HTC::HTCViveControllerOpenXR>{RightHand}/trackpadclicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""566dc254-8bf7-43e0-871e-8ac659fe3cde"",
                    ""path"": ""<XRInputV1::HTC::HTCViveControllerOpenXR>{LeftHand}/trackpadclicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba4583b1-ae59-46d7-b2aa-989192468639"",
                    ""path"": ""<XRInputV1::HTC::HTCViveControllerOpenXR>{RightHand}/triggerpressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47e7d546-69aa-4128-816a-950c1cdadb3f"",
                    ""path"": ""<XRInputV1::HTC::HTCViveControllerOpenXR>{LeftHand}/triggerpressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9314696d-3373-4065-9b0f-1042727d93b0"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a47a8031-9228-44e9-a1b5-c2ad9758addc"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Return"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""905a6251-40fe-4195-851e-e47d798602a8"",
                    ""path"": ""<ViveController>{LeftHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Return"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1299ee95-dfa5-4898-8beb-61e9f4e9f662"",
                    ""path"": ""<XRInputV1::HTC::HTCViveControllerOpenXR>{RightHand}/grippressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Return"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f798e75d-cda7-4729-b526-663c2565dc75"",
                    ""path"": ""<XRInputV1::HTC::HTCViveControllerOpenXR>{LeftHand}/grippressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Return"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a274a355-f0d4-40c1-8a2d-b9f621bfd34e"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74ca1241-1141-4afa-b3d5-9f541a91814d"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9b80497-afb5-488d-9654-04b1c55e3e73"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""startrecordingtest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7300ca3-d4db-4d23-870e-e138f21e1abf"",
                    ""path"": ""<XRInputV1::Oculus::OculusTouchControllerOpenXR>{LeftHand}/secondarybutton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""startrecordingtest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb8bfe4c-19ce-495a-a1be-6627d34ba8ef"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""stoprecordingtest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8fee7c1e-33ef-400d-9d58-1ec9cccb2c79"",
                    ""path"": ""<XRInputV1::Oculus::OculusTouchControllerOpenXR>{LeftHand}/primarybutton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""stoprecordingtest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0387bae-2ff1-492c-a6eb-561dea198a3b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""showrecordingtest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""474c08c7-e738-4ba5-8417-70bd170f7ed6"",
                    ""path"": ""<XRInputV1::Oculus::OculusTouchControllerOpenXR>{LeftHand}/thumbstickclicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""showrecordingtest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42de63ce-2454-4a14-933d-8ec19f91feee"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Calibration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11f26c19-ca07-4588-b4f5-b4a477de196b"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Validation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4bb9e23-0873-40d7-9414-388e6caa172e"",
                    ""path"": ""<XRInputV1::HTC::HTCViveControllerOpenXR>{RightHand}/trackpadclicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""Pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80130fcc-a903-4cbb-8201-068ba1536220"",
                    ""path"": ""<XRInputV1::HTC::HTCViveControllerOpenXR>{LeftHand}/trackpadclicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a68d540-deb9-4b60-9ce9-4d3f400143ee"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""169a7ed7-53bb-45d3-8e6d-a6e02502ef9d"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Unpause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0032cd34-395b-4808-a5e2-4400346284de"",
                    ""path"": ""<ViveController>{LeftHand}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""Left Controller Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94751f00-c896-4c00-b6cb-0e4d592022fa"",
                    ""path"": ""<ViveController>{RightHand}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""Right Controller Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ba05f75-2d9a-4df5-be34-9cd8dfb4f1d3"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Receiver "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d2eed0c-5f3f-41bf-b62c-e9c9975b231a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Signaler "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""VR"",
            ""bindingGroup"": ""VR"",
            ""devices"": []
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_MousePosition = m_Player.FindAction("MousePosition", throwIfNotFound: true);
        m_Player_EyeTracking = m_Player.FindAction("EyeTracking", throwIfNotFound: true);
        m_Player_EyeGazeIsTracked = m_Player.FindAction("Eye Gaze Is Tracked", throwIfNotFound: true);
        m_Player_HeadPosition = m_Player.FindAction("HeadPosition", throwIfNotFound: true);
        m_Player_HeadRotation = m_Player.FindAction("HeadRotation", throwIfNotFound: true);
        m_Player_LeftControllerDevice = m_Player.FindAction("Left Controller Device", throwIfNotFound: true);
        m_Player_RightControllerDevice = m_Player.FindAction("Right Controller Device", throwIfNotFound: true);
        m_Player_Freeze = m_Player.FindAction("Freeze", throwIfNotFound: true);
        m_Player_SelectBox = m_Player.FindAction("SelectBox", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Continue = m_UI.FindAction("Continue", throwIfNotFound: true);
        m_UI_Return = m_UI.FindAction("Return", throwIfNotFound: true);
        m_UI_Skip = m_UI.FindAction("Skip", throwIfNotFound: true);
        m_UI_Select = m_UI.FindAction("Select", throwIfNotFound: true);
        m_UI_startrecordingtest = m_UI.FindAction("startrecordingtest", throwIfNotFound: true);
        m_UI_stoprecordingtest = m_UI.FindAction("stoprecordingtest", throwIfNotFound: true);
        m_UI_showrecordingtest = m_UI.FindAction("showrecordingtest", throwIfNotFound: true);
        m_UI_Calibration = m_UI.FindAction("Calibration", throwIfNotFound: true);
        m_UI_Validation = m_UI.FindAction("Validation", throwIfNotFound: true);
        m_UI_Pressed = m_UI.FindAction("Pressed", throwIfNotFound: true);
        m_UI_Pause = m_UI.FindAction("Pause", throwIfNotFound: true);
        m_UI_Unpause = m_UI.FindAction("Unpause", throwIfNotFound: true);
        m_UI_LeftControllerDevice = m_UI.FindAction("Left Controller Device", throwIfNotFound: true);
        m_UI_RightControllerDevice = m_UI.FindAction("Right Controller Device", throwIfNotFound: true);
        m_UI_Receiver = m_UI.FindAction("Receiver ", throwIfNotFound: true);
        m_UI_Signaler = m_UI.FindAction("Signaler ", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_MousePosition;
    private readonly InputAction m_Player_EyeTracking;
    private readonly InputAction m_Player_EyeGazeIsTracked;
    private readonly InputAction m_Player_HeadPosition;
    private readonly InputAction m_Player_HeadRotation;
    private readonly InputAction m_Player_LeftControllerDevice;
    private readonly InputAction m_Player_RightControllerDevice;
    private readonly InputAction m_Player_Freeze;
    private readonly InputAction m_Player_SelectBox;
    public struct PlayerActions
    {
        private @InputBindings m_Wrapper;
        public PlayerActions(@InputBindings wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_Player_MousePosition;
        public InputAction @EyeTracking => m_Wrapper.m_Player_EyeTracking;
        public InputAction @EyeGazeIsTracked => m_Wrapper.m_Player_EyeGazeIsTracked;
        public InputAction @HeadPosition => m_Wrapper.m_Player_HeadPosition;
        public InputAction @HeadRotation => m_Wrapper.m_Player_HeadRotation;
        public InputAction @LeftControllerDevice => m_Wrapper.m_Player_LeftControllerDevice;
        public InputAction @RightControllerDevice => m_Wrapper.m_Player_RightControllerDevice;
        public InputAction @Freeze => m_Wrapper.m_Player_Freeze;
        public InputAction @SelectBox => m_Wrapper.m_Player_SelectBox;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @EyeTracking.started += instance.OnEyeTracking;
            @EyeTracking.performed += instance.OnEyeTracking;
            @EyeTracking.canceled += instance.OnEyeTracking;
            @EyeGazeIsTracked.started += instance.OnEyeGazeIsTracked;
            @EyeGazeIsTracked.performed += instance.OnEyeGazeIsTracked;
            @EyeGazeIsTracked.canceled += instance.OnEyeGazeIsTracked;
            @HeadPosition.started += instance.OnHeadPosition;
            @HeadPosition.performed += instance.OnHeadPosition;
            @HeadPosition.canceled += instance.OnHeadPosition;
            @HeadRotation.started += instance.OnHeadRotation;
            @HeadRotation.performed += instance.OnHeadRotation;
            @HeadRotation.canceled += instance.OnHeadRotation;
            @LeftControllerDevice.started += instance.OnLeftControllerDevice;
            @LeftControllerDevice.performed += instance.OnLeftControllerDevice;
            @LeftControllerDevice.canceled += instance.OnLeftControllerDevice;
            @RightControllerDevice.started += instance.OnRightControllerDevice;
            @RightControllerDevice.performed += instance.OnRightControllerDevice;
            @RightControllerDevice.canceled += instance.OnRightControllerDevice;
            @Freeze.started += instance.OnFreeze;
            @Freeze.performed += instance.OnFreeze;
            @Freeze.canceled += instance.OnFreeze;
            @SelectBox.started += instance.OnSelectBox;
            @SelectBox.performed += instance.OnSelectBox;
            @SelectBox.canceled += instance.OnSelectBox;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @EyeTracking.started -= instance.OnEyeTracking;
            @EyeTracking.performed -= instance.OnEyeTracking;
            @EyeTracking.canceled -= instance.OnEyeTracking;
            @EyeGazeIsTracked.started -= instance.OnEyeGazeIsTracked;
            @EyeGazeIsTracked.performed -= instance.OnEyeGazeIsTracked;
            @EyeGazeIsTracked.canceled -= instance.OnEyeGazeIsTracked;
            @HeadPosition.started -= instance.OnHeadPosition;
            @HeadPosition.performed -= instance.OnHeadPosition;
            @HeadPosition.canceled -= instance.OnHeadPosition;
            @HeadRotation.started -= instance.OnHeadRotation;
            @HeadRotation.performed -= instance.OnHeadRotation;
            @HeadRotation.canceled -= instance.OnHeadRotation;
            @LeftControllerDevice.started -= instance.OnLeftControllerDevice;
            @LeftControllerDevice.performed -= instance.OnLeftControllerDevice;
            @LeftControllerDevice.canceled -= instance.OnLeftControllerDevice;
            @RightControllerDevice.started -= instance.OnRightControllerDevice;
            @RightControllerDevice.performed -= instance.OnRightControllerDevice;
            @RightControllerDevice.canceled -= instance.OnRightControllerDevice;
            @Freeze.started -= instance.OnFreeze;
            @Freeze.performed -= instance.OnFreeze;
            @Freeze.canceled -= instance.OnFreeze;
            @SelectBox.started -= instance.OnSelectBox;
            @SelectBox.performed -= instance.OnSelectBox;
            @SelectBox.canceled -= instance.OnSelectBox;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Continue;
    private readonly InputAction m_UI_Return;
    private readonly InputAction m_UI_Skip;
    private readonly InputAction m_UI_Select;
    private readonly InputAction m_UI_startrecordingtest;
    private readonly InputAction m_UI_stoprecordingtest;
    private readonly InputAction m_UI_showrecordingtest;
    private readonly InputAction m_UI_Calibration;
    private readonly InputAction m_UI_Validation;
    private readonly InputAction m_UI_Pressed;
    private readonly InputAction m_UI_Pause;
    private readonly InputAction m_UI_Unpause;
    private readonly InputAction m_UI_LeftControllerDevice;
    private readonly InputAction m_UI_RightControllerDevice;
    private readonly InputAction m_UI_Receiver;
    private readonly InputAction m_UI_Signaler;
    public struct UIActions
    {
        private @InputBindings m_Wrapper;
        public UIActions(@InputBindings wrapper) { m_Wrapper = wrapper; }
        public InputAction @Continue => m_Wrapper.m_UI_Continue;
        public InputAction @Return => m_Wrapper.m_UI_Return;
        public InputAction @Skip => m_Wrapper.m_UI_Skip;
        public InputAction @Select => m_Wrapper.m_UI_Select;
        public InputAction @startrecordingtest => m_Wrapper.m_UI_startrecordingtest;
        public InputAction @stoprecordingtest => m_Wrapper.m_UI_stoprecordingtest;
        public InputAction @showrecordingtest => m_Wrapper.m_UI_showrecordingtest;
        public InputAction @Calibration => m_Wrapper.m_UI_Calibration;
        public InputAction @Validation => m_Wrapper.m_UI_Validation;
        public InputAction @Pressed => m_Wrapper.m_UI_Pressed;
        public InputAction @Pause => m_Wrapper.m_UI_Pause;
        public InputAction @Unpause => m_Wrapper.m_UI_Unpause;
        public InputAction @LeftControllerDevice => m_Wrapper.m_UI_LeftControllerDevice;
        public InputAction @RightControllerDevice => m_Wrapper.m_UI_RightControllerDevice;
        public InputAction @Receiver => m_Wrapper.m_UI_Receiver;
        public InputAction @Signaler => m_Wrapper.m_UI_Signaler;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Continue.started += instance.OnContinue;
            @Continue.performed += instance.OnContinue;
            @Continue.canceled += instance.OnContinue;
            @Return.started += instance.OnReturn;
            @Return.performed += instance.OnReturn;
            @Return.canceled += instance.OnReturn;
            @Skip.started += instance.OnSkip;
            @Skip.performed += instance.OnSkip;
            @Skip.canceled += instance.OnSkip;
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @startrecordingtest.started += instance.OnStartrecordingtest;
            @startrecordingtest.performed += instance.OnStartrecordingtest;
            @startrecordingtest.canceled += instance.OnStartrecordingtest;
            @stoprecordingtest.started += instance.OnStoprecordingtest;
            @stoprecordingtest.performed += instance.OnStoprecordingtest;
            @stoprecordingtest.canceled += instance.OnStoprecordingtest;
            @showrecordingtest.started += instance.OnShowrecordingtest;
            @showrecordingtest.performed += instance.OnShowrecordingtest;
            @showrecordingtest.canceled += instance.OnShowrecordingtest;
            @Calibration.started += instance.OnCalibration;
            @Calibration.performed += instance.OnCalibration;
            @Calibration.canceled += instance.OnCalibration;
            @Validation.started += instance.OnValidation;
            @Validation.performed += instance.OnValidation;
            @Validation.canceled += instance.OnValidation;
            @Pressed.started += instance.OnPressed;
            @Pressed.performed += instance.OnPressed;
            @Pressed.canceled += instance.OnPressed;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Unpause.started += instance.OnUnpause;
            @Unpause.performed += instance.OnUnpause;
            @Unpause.canceled += instance.OnUnpause;
            @LeftControllerDevice.started += instance.OnLeftControllerDevice;
            @LeftControllerDevice.performed += instance.OnLeftControllerDevice;
            @LeftControllerDevice.canceled += instance.OnLeftControllerDevice;
            @RightControllerDevice.started += instance.OnRightControllerDevice;
            @RightControllerDevice.performed += instance.OnRightControllerDevice;
            @RightControllerDevice.canceled += instance.OnRightControllerDevice;
            @Receiver.started += instance.OnReceiver;
            @Receiver.performed += instance.OnReceiver;
            @Receiver.canceled += instance.OnReceiver;
            @Signaler.started += instance.OnSignaler;
            @Signaler.performed += instance.OnSignaler;
            @Signaler.canceled += instance.OnSignaler;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Continue.started -= instance.OnContinue;
            @Continue.performed -= instance.OnContinue;
            @Continue.canceled -= instance.OnContinue;
            @Return.started -= instance.OnReturn;
            @Return.performed -= instance.OnReturn;
            @Return.canceled -= instance.OnReturn;
            @Skip.started -= instance.OnSkip;
            @Skip.performed -= instance.OnSkip;
            @Skip.canceled -= instance.OnSkip;
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @startrecordingtest.started -= instance.OnStartrecordingtest;
            @startrecordingtest.performed -= instance.OnStartrecordingtest;
            @startrecordingtest.canceled -= instance.OnStartrecordingtest;
            @stoprecordingtest.started -= instance.OnStoprecordingtest;
            @stoprecordingtest.performed -= instance.OnStoprecordingtest;
            @stoprecordingtest.canceled -= instance.OnStoprecordingtest;
            @showrecordingtest.started -= instance.OnShowrecordingtest;
            @showrecordingtest.performed -= instance.OnShowrecordingtest;
            @showrecordingtest.canceled -= instance.OnShowrecordingtest;
            @Calibration.started -= instance.OnCalibration;
            @Calibration.performed -= instance.OnCalibration;
            @Calibration.canceled -= instance.OnCalibration;
            @Validation.started -= instance.OnValidation;
            @Validation.performed -= instance.OnValidation;
            @Validation.canceled -= instance.OnValidation;
            @Pressed.started -= instance.OnPressed;
            @Pressed.performed -= instance.OnPressed;
            @Pressed.canceled -= instance.OnPressed;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Unpause.started -= instance.OnUnpause;
            @Unpause.performed -= instance.OnUnpause;
            @Unpause.canceled -= instance.OnUnpause;
            @LeftControllerDevice.started -= instance.OnLeftControllerDevice;
            @LeftControllerDevice.performed -= instance.OnLeftControllerDevice;
            @LeftControllerDevice.canceled -= instance.OnLeftControllerDevice;
            @RightControllerDevice.started -= instance.OnRightControllerDevice;
            @RightControllerDevice.performed -= instance.OnRightControllerDevice;
            @RightControllerDevice.canceled -= instance.OnRightControllerDevice;
            @Receiver.started -= instance.OnReceiver;
            @Receiver.performed -= instance.OnReceiver;
            @Receiver.canceled -= instance.OnReceiver;
            @Signaler.started -= instance.OnSignaler;
            @Signaler.performed -= instance.OnSignaler;
            @Signaler.canceled -= instance.OnSignaler;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_VRSchemeIndex = -1;
    public InputControlScheme VRScheme
    {
        get
        {
            if (m_VRSchemeIndex == -1) m_VRSchemeIndex = asset.FindControlSchemeIndex("VR");
            return asset.controlSchemes[m_VRSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
        void OnEyeTracking(InputAction.CallbackContext context);
        void OnEyeGazeIsTracked(InputAction.CallbackContext context);
        void OnHeadPosition(InputAction.CallbackContext context);
        void OnHeadRotation(InputAction.CallbackContext context);
        void OnLeftControllerDevice(InputAction.CallbackContext context);
        void OnRightControllerDevice(InputAction.CallbackContext context);
        void OnFreeze(InputAction.CallbackContext context);
        void OnSelectBox(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnContinue(InputAction.CallbackContext context);
        void OnReturn(InputAction.CallbackContext context);
        void OnSkip(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnStartrecordingtest(InputAction.CallbackContext context);
        void OnStoprecordingtest(InputAction.CallbackContext context);
        void OnShowrecordingtest(InputAction.CallbackContext context);
        void OnCalibration(InputAction.CallbackContext context);
        void OnValidation(InputAction.CallbackContext context);
        void OnPressed(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnUnpause(InputAction.CallbackContext context);
        void OnLeftControllerDevice(InputAction.CallbackContext context);
        void OnRightControllerDevice(InputAction.CallbackContext context);
        void OnReceiver(InputAction.CallbackContext context);
        void OnSignaler(InputAction.CallbackContext context);
    }
}
